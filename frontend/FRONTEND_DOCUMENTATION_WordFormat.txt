SHOPIFY XENO FRONTEND - COMPLETE DOCUMENTATION

TABLE OF CONTENTS
1. PROJECT OVERVIEW
2. TECHNOLOGY STACK
3. ARCHITECTURE
4. CORE COMPONENTS
5. FILE STRUCTURE
6. COMPONENT DETAILS
7. ROUTING
8. AUTHENTICATION
9. DATA FLOW
10. API INTEGRATION
11. INTERVIEW QUESTIONS

================================================================================

1. PROJECT OVERVIEW

The Shopify Xeno Frontend is a modern, responsive dashboard application built with React and TypeScript. It provides a comprehensive analytics interface for Shopify store owners to visualize their business data, including revenue trends, customer insights, product performance, and more.

KEY FEATURES:
- Google OAuth authentication
- Real-time dashboard with interactive charts
- Multi-period data visualization (1 week, 1 month, 6 months, 1 year)
- Export functionality to PDF
- Responsive design for all device sizes
- Protected routes for authenticated users
- Integration with backend API for data retrieval

TARGET USERS:
- Shopify store owners
- E-commerce managers
- Business analysts
- Marketing professionals

================================================================================

2. TECHNOLOGY STACK

FRONTEND FRAMEWORKS & LIBRARIES:
- React 18 - JavaScript library for building user interfaces
- TypeScript - Typed superset of JavaScript
- Vite - Fast build tool and development server
- React Router DOM - Declarative routing for React applications
- Tailwind CSS - Utility-first CSS framework
- Shadcn UI - Reusable component library built with Radix UI and Tailwind CSS
- Recharts - Composable charting library built on D3
- React Query (TanStack Query) - Server state management
- Lucide React - Icon library
- React Hook Form - Form validation library

AUTHENTICATION:
- Google OAuth via @react-oauth/google
- JWT token handling

UI COMPONENTS:
- Radix UI primitives for accessible UI components
- Various UI components from shadcn/ui including cards, buttons, badges, charts, etc.

DATA VISUALIZATION:
- Recharts for creating responsive charts including line charts, bar charts, pie charts, area charts, and more

================================================================================

3. ARCHITECTURE

The frontend follows a component-based architecture with clear separation of concerns:

1. PAGES LAYER:
   - Contains top-level page components that represent different routes
   - Each page component orchestrates the display of multiple child components

2. COMPONENTS LAYER:
   - Reusable UI components used across different pages
   - Includes both custom components and shadcn/ui components
   - Organized in a hierarchical structure with atomic components at the base

3. CONTEXT LAYER:
   - Global state management using React Context API
   - Authentication context for managing user state
   - Theme context for dark/light mode (if implemented)

4. LIBRARY LAYER:
   - Utility functions and helper methods
   - API integration functions
   - Data transformation and formatting functions

5. HOOKS LAYER:
   - Custom React hooks for reusable logic
   - Data fetching hooks
   - State management hooks

6. DATA LAYER:
   - Static data files
   - Mock data for development/testing
   - Type definitions

ARCHITECTURAL PATTERNS:
- Component-based architecture
- Unidirectional data flow
- Separation of concerns
- Single responsibility principle

================================================================================

4. CORE COMPONENTS

MAIN PAGES:
1. Index.tsx - Landing page
2. Dashboard.tsx - Main analytics dashboard with charts and metrics
3. BackendDashboard.tsx - Alternative dashboard view
4. AuthGoogle.tsx - Google authentication page
5. Pricing.tsx - Pricing information page
6. NotFound.tsx - 404 error page

KEY COMPONENTS:
1. Navigation.tsx - Main navigation bar
2. ProtectedRoutes.tsx - Component for protecting authenticated routes
3. KpiRow.tsx - Key Performance Indicator cards
4. CategoryRadar.tsx - Category performance visualization
5. ChannelsPie.tsx - Sales channel distribution chart
6. OrdersLine.tsx - Order trends visualization
7. TopProductsBar.tsx - Top selling products chart
8. RecentOrdersTable.tsx - Recent orders data table
9. FunnelBars.tsx - Sales funnel visualization

CONTEXT PROVIDERS:
1. AuthContext.tsx - Manages authentication state and user data

UI COMPONENTS (shadcn/ui):
- Card, CardHeader, CardTitle, CardContent
- Button
- Badge
- Select, SelectTrigger, SelectValue, SelectContent, SelectItem
- Skeleton for loading states
- Tooltip
- Alert, AlertTitle, AlertDescription

================================================================================

5. FILE STRUCTURE

frontend/
├── public/ - Static assets
├── src/
│   ├── components/ - Reusable UI components
│   │   ├── ui/ - shadcn/ui components
│   │   ├── CategoryRadar.tsx
│   │   ├── ChannelsPie.tsx
│   │   ├── CtaSection.tsx
│   │   ├── DemoShowcase.tsx
│   │   ├── DetailedFeatures.tsx
│   │   ├── FAQSection.tsx
│   │   ├── FeatureSection.tsx
│   │   ├── Footer.tsx
│   │   ├── FunnelBars.tsx
│   │   ├── HeroSection.tsx
│   │   ├── InteractiveFeatures.tsx
│   │   ├── KpiRow.tsx
│   │   ├── Navigation.tsx
│   │   ├── OrdersLine.tsx
│   │   ├── PrivacySection.tsx
│   │   ├── ProtectedRoutes.tsx
│   │   ├── RecentOrdersTable.tsx
│   │   └── TopProductsBar.tsx
│   ├── contexts/ - React context providers
│   │   └── AuthContext.tsx
│   ├── data/ - Static data files
│   │   └── tenatBlob.ts
│   ├── hooks/ - Custom React hooks
│   │   ├── use-mobile.tsx
│   │   └── use-toast.ts
│   ├── lib/ - Utility functions and API integration
│   │   ├── format.ts
│   │   ├── insights.api.ts
│   │   ├── insights.mappers.ts
│   │   └── utils.ts
│   ├── pages/ - Page components for routing
│   │   ├── AuthGoogle.tsx
│   │   ├── BackendDashboard.tsx
│   │   ├── Dashboard.tsx
│   │   ├── Index.tsx
│   │   ├── NotFound.tsx
│   │   └── Pricing.tsx
│   ├── types/ - TypeScript type definitions
│   │   ├── chart-data.ts
│   │   └── formatters.ts
│   ├── utils/ - Utility functions
│   │   └── cn.ts
│   ├── App.css - Global styles
│   ├── App.tsx - Main application component with routing
│   ├── index.css - Base styles
│   ├── main.tsx - Application entry point
│   └── vite-env.d.ts - Vite environment types
├── index.html - HTML template
├── package.json - Dependencies and scripts
├── tsconfig.json - TypeScript configuration
├── vite.config.ts - Vite configuration
├── tailwind.config.ts - Tailwind CSS configuration
└── postcss.config.js - PostCSS configuration

================================================================================

6. COMPONENT DETAILS

DASHBOARD COMPONENT (Dashboard.tsx):
The main dashboard is the heart of the application, featuring:
- User profile section with avatar and logout functionality
- Time period selector (1w, 1m, 6m, 1y)
- KPI cards showing customers, orders, revenue, and average order value
- Interactive charts for revenue/orders trends
- Category distribution pie chart
- Advanced analytics sections including:
  * Customer segments treemap
  * Sales funnel visualization
  * 24-hour performance chart
  * Product performance matrix
  * Customer retention analysis
- Executive summary with business health scores
- Strategic action items recommendations
- Daily performance statistics

AUTHENTICATION COMPONENT (AuthGoogle.tsx):
- Google OAuth login interface
- Secure authentication messaging
- Redirect to dashboard upon successful authentication
- Error handling for failed logins

NAVIGATION COMPONENT (Navigation.tsx):
- Main navigation menu
- Responsive design for mobile and desktop
- Links to different sections of the application

PROTECTED ROUTES COMPONENT (ProtectedRoutes.tsx):
- Wrapper component for routes that require authentication
- Redirects unauthenticated users to login page
- Loading state while checking authentication status

KPI ROW COMPONENT (KpiRow.tsx):
- Displays key performance indicators in card format
- Shows trends with charts
- Color-coded badges for performance indicators
- Loading skeletons for better UX

================================================================================

7. ROUTING

The application uses React Router for client-side routing:

ROUTES:
- / - Landing page (Index.tsx)
- /auth/google - Google authentication page (AuthGoogle.tsx)
- /dashboard - Main dashboard (Dashboard.tsx) - Protected route
- /backend - Backend dashboard (BackendDashboard.tsx) - Protected route
- /pricing - Pricing information (Pricing.tsx)
- * - Not found page (NotFound.tsx) - Catch-all route

ROUTE PROTECTION:
- Protected routes are wrapped with ProtectedRoute component
- Unauthenticated users are redirected to /auth/google
- Loading state displayed while checking authentication status

================================================================================

8. AUTHENTICATION

AUTHENTICATION FLOW:
1. User navigates to protected route without authentication
2. Redirected to /auth/google
3. User clicks Google login button
4. Google OAuth flow initiated
5. Upon successful authentication, JWT token received
6. User data extracted from token and stored in AuthContext
7. User redirected to original destination
8. Auth state persisted in localStorage

AUTH CONTEXT (AuthContext.tsx):
- Manages global authentication state
- Provides user data to all components
- Handles login/logout functionality
- Persists user data in localStorage
- JWT token decoding utility

PROTECTED ROUTES:
- Components wrapped with ProtectedRoute
- Checks for authenticated user before rendering
- Redirects to login if not authenticated

================================================================================

9. DATA FLOW

DATA FLOW ARCHITECTURE:
1. User interacts with UI (e.g., selects time period)
2. Component state updates trigger data requests
3. API functions in lib/insights.api.ts make HTTP requests to backend
4. Backend returns data in JSON format
5. Data is processed and formatted in the component
6. Formatted data is passed to charting components
7. Charts render visualizations based on the data
8. User can interact with charts and export data

STATE MANAGEMENT:
- Local component state for UI interactions
- React Context for global authentication state
- React Query for server state management (if implemented)

DATA TRANSFORMATION:
- Data mapping in lib/insights.mappers.ts
- Formatting utilities in lib/format.ts
- Type definitions in types/ directory

================================================================================

10. API INTEGRATION

API INTEGRATION LAYER:
- Located in src/lib/insights.api.ts
- Contains typed functions for all backend endpoints
- Handles HTTP requests with proper error handling
- Includes data transformation and validation

MAIN API FUNCTIONS:
- getSummary() - Retrieves dashboard summary data
- getOrdersByDate() - Gets orders and revenue by date
- getTopCustomers() - Retrieves top spending customers
- getTopProducts() - Gets best selling products
- getRecentOrders() - Fetches recent orders
- getDataSummary() - Gets overall data summary

API ENDPOINTS:
- /insights/summary - Dashboard summary statistics
- /insights/orders-by-date - Orders and revenue trends
- /insights/top-customers - Top customers by spending
- /insights/top-products - Best selling products
- /insights/recent-orders - Recently processed orders
- /api/data-summary - Overall data counts and samples

ERROR HANDLING:
- Try/catch blocks in API functions
- Meaningful error messages
- Graceful degradation for failed requests

================================================================================

11. INTERVIEW QUESTIONS

REACT & COMPONENT ARCHITECTURE
1. Q: How does the component hierarchy work in this application?
   A: The application follows a hierarchical component structure with App.tsx at the root, containing page components, which in turn contain smaller UI components. This promotes reusability and maintainability.

2. Q: What is the purpose of the ProtectedRoute component?
   A: The ProtectedRoute component ensures that only authenticated users can access certain routes. It checks the authentication state and redirects unauthenticated users to the login page.

3. Q: How is state managed in this application?
   A: State is managed through a combination of local component state (useState), global state via React Context (AuthContext), and potentially React Query for server state.

REACT ROUTER
4. Q: How does routing work in this application?
   A: The application uses React Router DOM for client-side routing. Routes are defined in App.tsx with different components rendered based on the URL path. Protected routes are wrapped with the ProtectedRoute component.

5. Q: What happens when a user navigates to a protected route without being authenticated?
   A: The ProtectedRoute component checks the authentication status. If the user is not authenticated, they are redirected to the /auth/google route for login.

AUTHENTICATION
6. Q: How does Google OAuth authentication work in this application?
   A: The application uses the @react-oauth/google library to implement Google OAuth. When a user clicks the login button, they're redirected to Google's OAuth flow. Upon successful authentication, a JWT token is received which is then decoded to extract user information.

7. Q: How is the user's authentication state persisted?
   A: The user's authentication state is stored in localStorage as a JSON object. When the application loads, it checks localStorage for existing user data and restores the authentication state.

DATA FLOW & API INTEGRATION
8. Q: How does the dashboard fetch and display data?
   A: The dashboard component makes API calls to the backend using functions defined in lib/insights.api.ts. The returned data is processed and formatted, then passed to various charting components from Recharts for visualization.

9. Q: How are loading states handled in the UI?
   A: Loading states are handled using Skeleton components from shadcn/ui. These provide a visual indication that data is being fetched, improving the user experience during data loading.

10. Q: How does the time period selector work?
    A: The time period selector is a dropdown that allows users to choose different time ranges (1w, 1m, 6m, 1y). When a user selects a period, it triggers a state update which causes the dashboard to fetch new data for that time range.

PERFORMANCE & OPTIMIZATION
11. Q: What measures have been taken to optimize the application's performance?
    A: The application uses Vite for fast development and build times, implements code splitting through React's lazy loading, uses memoization where appropriate, and employs efficient data fetching strategies.

12. Q: How are charts optimized for performance?
    A: Charts are rendered using Recharts, which is built on D3 but optimized for React. The library efficiently handles updates and only re-renders when necessary. Large datasets are processed before being passed to chart components.

ERROR HANDLING
13. Q: How are errors handled in API calls?
    A: API functions include try/catch blocks to handle errors gracefully. Failed requests result in meaningful error messages being displayed to the user, and the UI provides appropriate feedback.

14. Q: What happens if the backend API is unavailable?
    A: If the backend API is unavailable, API calls will fail and error handling will display appropriate messages to the user. The application is designed to gracefully handle such scenarios without completely breaking the user experience.

DEVELOPMENT & BUILD PROCESS
15. Q: How is the application built and deployed?
    A: The application uses Vite as its build tool. It can be built for production using the "vite build" command which creates optimized bundles. The build process includes TypeScript compilation, CSS optimization, and asset optimization.