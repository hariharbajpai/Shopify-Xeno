// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  name         String?
  googleId     String?  @unique
  passwordHash String?  // Keep existing field to avoid data loss
  avatar       String?
  role         String   @default("user")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model RefreshToken {
  id          String   @id @default(cuid())
  userId      String
  token       String   @unique
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  @@index([userId])
  @@index([token])
}
model Tenant {
  id           String  @id @default(uuid())
  tenantId     String  @unique
  shopDomain   String  @unique
  accessToken  String
  scopes       String?
  shopName     String?
  email        String?
  currency     String? @default("USD")
  timezone     String?
  status       String  @default("active")
  
  // Delta sync cursors for last updated_at_min
  productsCursor   DateTime?
  customersCursor  DateTime?
  ordersCursor     DateTime?
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  products     Product[]
  customers    Customer[]
  orders       Order[]
  webhookEvents WebhookEvent[]
}

model Product {
  id         String   @id @default(uuid())
  tenantId   String
  shopId     BigInt   @unique
  title      String
  status     String?
  priceMin   Decimal? @db.Decimal(10,2)
  priceMax   Decimal? @db.Decimal(10,2)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  tenant     Tenant   @relation(fields: [tenantId], references: [id])

  @@index([tenantId])
  @@index([shopId])
}

model Customer {
  id         String   @id @default(uuid())
  tenantId   String
  shopId     BigInt   @unique
  email      String?
  firstName  String?
  lastName   String?
  totalSpent Decimal? @db.Decimal(12,2)
  ordersCount Int?    @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  tenant     Tenant   @relation(fields: [tenantId], references: [id])

  @@index([tenantId])
  @@index([shopId])
}

model Order {
  id           String   @id @default(uuid())
  tenantId     String
  shopId       BigInt   @unique
  customerShopId BigInt?
  name         String?
  currency     String?
  financialStatus String?
  fulfillmentStatus String?
  totalPrice   Decimal  @db.Decimal(12,2)
  subtotalPrice Decimal? @db.Decimal(12,2)
  totalTax     Decimal? @db.Decimal(12,2)
  totalDiscount Decimal? @db.Decimal(12,2)
  createdAt    DateTime @default(now())
  processedAt  DateTime?
  updatedAt    DateTime @updatedAt
  tenant       Tenant   @relation(fields: [tenantId], references: [id])
  lineItems    LineItem[]

  @@index([tenantId])
  @@index([shopId])
  @@index([processedAt])
}

model LineItem {
  id         String   @id @default(uuid())
  orderId    String
  shopId     BigInt?
  productShopId BigInt?
  title      String?
  quantity   Int      @default(0)
  price      Decimal? @db.Decimal(12,2)
  totalDiscount Decimal? @db.Decimal(12,2)
  sku        String?
  order      Order    @relation(fields: [orderId], references: [id])

  @@index([orderId])
  @@index([productShopId])
}

model WebhookEvent {
  id         String   @id @default(uuid())
  tenantId   String
  topic      String
  shopDomain String
  payload    Json
  receivedAt DateTime @default(now())
  tenant     Tenant   @relation(fields: [tenantId], references: [id])

  @@index([tenantId, topic])
  @@index([receivedAt])
}

